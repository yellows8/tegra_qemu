/*
 * ARM NVIDIA Tegra2 emulation.
 *
 * Copyright (c) 2014-2015 Dmitry Osipenko <digetx@gmail.com>
 *
 *  This program is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the
 *  Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 *  for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, see <http://www.gnu.org/licenses/>.
 */

// Based on timer.h.

/* Autogenerated from TRM v02p */

#ifndef TEGRA_WDT_H
#define TEGRA_WDT_H

#define CONFIG_OFFSET 0x0
#define CONFIG_RESET  0x00000000
typedef union config_u {
    struct {
        unsigned int timer_source:4;
        unsigned int period:8;
        unsigned int interrupt_en:1;
        unsigned int fiq_enable:1;
        unsigned int system_reset_enable:1;
        unsigned int pmc2car_reset_enable:1;
        unsigned int core_reset_bitmap_en:5;
    };

    uint32_t reg32;
} config_t;

#define STATUS_OFFSET 0x4
#define STATUS_RESET  0x00000000
typedef union status_u {
    struct {
        unsigned int enabled:1;
        unsigned int interrupt_status:1;
        unsigned int fiq_status:1;
        unsigned int undefined_bit_3:1;
        unsigned int current_count:8;
        unsigned int current_expiration_count:2;
    };

    uint32_t reg32;
} status_t;

#define COMMAND_OFFSET 0x8
#define COMMAND_RESET  0x00000000
typedef union command_u {
    struct {
        unsigned int start_counter:1;
        unsigned int disable_counter:1;
    };

    uint32_t reg32;
} command_t;

#define UNLOCK_PATTERN_OFFSET 0xC
#define UNLOCK_PATTERN_RESET  0x00000000
typedef union unlock_pattern_u {
    struct {
        unsigned int unlock_pattern:16;
    };

    uint32_t reg32;
} unlock_pattern_t;

#define DEFINE_REG32(reg) reg##_t reg

typedef struct tegra_wdt_state {
    SysBusDevice parent_obj;

    MemoryRegion iomem;
    ptimer_state *ptimer;
    DEFINE_REG32(config);
    DEFINE_REG32(status);
    DEFINE_REG32(command);
    DEFINE_REG32(unlock_pattern);
    qemu_irq irq;
    qemu_irq fiq;
    int expiration_count;
} tegra_wdt;

void tegra_wdt_alarm(void *opaque);

#endif // TEGRA_WDT_H
